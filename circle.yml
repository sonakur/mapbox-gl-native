version: 2.1

workflows:
  version: 2
  default:
    jobs:
      - clang-checks
      - build-template-linux:
          name: android-armeabi-v7a-release
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=armeabi-v7a'
      - build-template-linux:
          name: android-arm64-v8a-release
          requires:
            - android-armeabi-v7a-release
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=arm64-v8a'
      - build-template-linux:
          name: android-x86-release
          requires:
            - android-armeabi-v7a-release
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=x86'
      - build-template-linux:
          name: android-x86_64-release
          requires:
            - android-armeabi-v7a-release
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=x86_64'
      - build-template-linux:
          name: linux-gcc8-release
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8'
      - build-template-linux:
          name: linux-gcc4.9-release
          requires:
            - linux-gcc8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-4.9 -DCMAKE_CXX_COMPILER=g++-4.9'
          build_params: '--target mbgl-core'
          test_params: '-N'
      - build-template-linux:
          name: linux-gcc8-debug-coverage
          requires:
            - linux-gcc8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_BUILD_TYPE=DebugCoverage'
      - build-template-linux:
          name: linux-clang8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8'
          requires:
            - clang-checks
      - build-template-linux:
          name: linux-clang8-sanitize-address
          requires:
            - linux-clang8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=address'
      - build-template-linux:
          name: linux-clang8-sanitize-thread
          requires:
            - linux-clang8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=thread'
      - build-template-linux:
          name: linux-clang8-sanitize-memory
          requires:
            - linux-clang8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=memory'
      - build-template-linux:
          name: linux-clang8-sanitize-undefined
          requires:
            - linux-clang8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=undefined'
      - build-template-linux:
          name: qt5-linux-gcc5-release
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-5 -DCMAKE_CXX_COMPILER=g++-5 -DMBGL_WITH_QT=ON'
          build_params: '--target mbgl-qt'
          test_params: '-Q -N'

commands:
  prepare:
    steps:
      - run:
          name: Prepare
          command: |
            git submodule update --init --recursive
            npm install
  config:
    parameters:
      config_params:
        type: string
    steps:
      - run:
          name: Configure
          command: |
            mkdir build && cd build
            cmake .. << parameters.config_params >>
  build:
    parameters:
      build_params:
        type: string
    steps:
      - restore_cache:
          keys:
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}'
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-'
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-master'
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-'
      - run:
          name: Build
          command: |
            ccache --zero-stats --max-size=2G
            cd build
            cmake --build . -j 4 << parameters.build_params >>
            ccache --show-stats
      - save_cache:
          key: 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}'
          paths: [ '~/.ccache' ]
  test:
    parameters:
      test_params:
        type: string
    steps:
      - run:
          name: Test
          command: |
            cd build
            xvfb-run -s -noreset ctest -V << parameters.test_params >>


executors:
  linux:
    docker:
      # FIXME: Move the image to mbgl/
      - image: tmpsantos/mbgl_ci:1.2
    resource_class: large
    working_directory: /src


jobs:
  clang-checks:
    executor: linux
    steps:
      - checkout
      - prepare
      - config:
          config_params: '-G Ninja'
      - run:
          name: Clang Format
          command: |
            git clang-format-8
      - run:
          name: Clang Tidy
          command: |
            cd build
            run-clang-tidy-8 -j8 -extra-arg-before="-I/usr/lib/llvm-8/include/c++/v1"
  build-template-linux:
    parameters:
      config_params:
        type: string
        default: '-G Ninja'
      build_params:
        type: string
        default: ''
      test_params:
        type: string
        default: ''
    executor: linux
    environment:
      UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
    steps:
      - checkout
      - prepare
      - config:
          config_params: << parameters.config_params >>
      - build:
          build_params: << parameters.build_params >>
      - test:
          test_params: << parameters.test_params >>



# FIXME: should only store failing results
#      - store_artifacts:
#          path: /src/mapbox-gl-js/test/integration/render-tests
#          destination: render-tests
#          when: on_fail

#      - build-template-macos:
#          name: Qt5 macOS xcode 10.1.0 Release
#          xcode: '10.1.0'
#          config_params: '-G Xcode -DMBGL_WITH_QT=ON'
#      - build-template-macos:
#          name: macOS xcode 10.2.1 Release
#          xcode: '10.2.1'
#          config_params: '-G Xcode'
#  build-template-macos:
#    parameters:
#      xcode:
#        type: string
#      config_params:
#        type: string
#        default: ''
#      build_params:
#        type: string
#        default: ''
#    macos:
#      xcode: << parameters.xcode >>
#    environment:
#      HOMEBREW_NO_AUTO_UPDATE: 1
#      HOMEBREW_NO_INSTALL_CLEANUP: 1
#    steps:
#      - checkout
#      - prepare
#      - run:
#          name: Install deps
#          command: |
#            brew install cmake ccache pkgconfig glfw qt
#            brew link qt --force
#            export HOMEBREW_QT5_CELLAR=$(brew --cellar qt)
#            export HOMEBREW_QT5_VERSION=$(brew list --versions qt |rev |cut -d' ' -f1 |rev)
#            sudo ln -s $HOMEBREW_QT5_CELLAR/$HOMEBREW_QT5_VERSION/mkspecs /usr/local/mkspecs
#            sudo ln -s $HOMEBREW_QT5_CELLAR/$HOMEBREW_QT5_VERSION/plugins /usr/local/plugins
#      - config:
#          config_params: << parameters.config_params >>
#      - build:
#          build_params: << parameters.build_params >>
#      - test
